# coding: utf-8
# Monkey patching Ruby's Hash class

# Merge a and b. If a and b are hashes, they are recursively merged.
# - a and b might be strings or nil. 
# - b values have the highest priority (if not nil).
def deep_merge_entries(a, b)
  if b.is_a?(Hash)
    a.is_a?(Hash) ? a.deep_merge(b) : b
  else
    b.nil? ? a : b
  end
end

def rec_sort(h)
  case h
  when Array
    h.map{|v| rec_sort(v)}#.sort_by!{|v| (v.to_s rescue nil) }
  when Hash
    Hash[Hash[h.map{|k,v| [rec_sort(k),rec_sort(v)]}].sort_by{|k,v| [(k.to_s rescue nil), (v.to_s rescue nil)]}]
  else
    h
  end
end

# Write pretty and sorted JSON files
def write_json(filepath, data, perm = 0644)
  File.open(filepath, 'w', perm) do |f|
    f.write(JSON.pretty_generate(rec_sort(data)))
  end
end

# Write sorted YAML files
def write_yaml(filepath, data, perm = 0644)
  File.open(filepath, 'w', perm) do |f|
    f.write(rec_sort(data).to_yaml)
  end
end

# prepend header
def add_header(output_file)
    header_template = <<-eol  
#
# This file was generated by reference-repository.git
# Do not edit this file by hand. Your changes will be overwritten.
#
eol

  header = ERB.new(header_template).result()
  contents = File.read(output_file)
  File.write(output_file, header + "\n" + contents)
end

# Extend Hash with helper methods needed to convert input data files to ruby Hash
class ::Hash

  def slice(*extract)
    h2 = self.select{|key, _value| extract.include?(key) }
    h2
  end

  # Recursively merge this Hash with another (ie. merge nested hash)
  # Returns a new hash containing the contents of other_hash and the contents of hash. The value for entries with duplicate keys will be that of other_hash:
  # a = {"key": "value_a"}
  # b = {"key": "value_b"}
  # a.deep_merge(b) -> {:key=>"value_b"}
  # b.deep_merge(a) -> {:key=>"value_a"}
  def deep_merge(other_hash)
    merger = proc { |_key, v1, v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : v2 }
    self.merge(other_hash, &merger)
  end

  # Merge keys that match "PREFIX[a-b]" with others keys that begins by "PREFIX" 
  # and that ends with x, where a<=x<=b.
  # - This is done recursively (for this Hash and every Hashes it may contain).
  # - PREFIX[a-b] values have lower priority on existing PREFIXx keys.
  # - "a" and/or "b" may be omited (ie. "PREFIX[a-]", "PREFIX[-b]" or "PREFIX[-]"), meaning that there are no lower and/or upper bound for x.
  #   * If only a is omited, a == 1.
  #   * If b is omited, only existing keys are modified (no keys are created). Otherwise, PREFIX[a] to PREFIX[b] entries are created (if missing).
  # Example:
  # {"foo-1": {a: 0}, "foo-2": {a: 0}, "foo-3": {a: 0}, "foo-[2-]": {b: 1}}.expand_square_brackets()
  #  -> {"foo-1": {a: 0}, "foo-2": {a: 0, b:1},  "foo-3": {a: 0, b: 0}}
  def expand_square_brackets(keys=self.clone)

    # Looking up for PREFIX[a-b] keys
    # (using .clone because cannot add/remove a key from hash during iteration)
    keys.clone.each { |key_ab, value_ab|

      prefix, a, b = key_ab.to_s.scan(/^(.*)\[(\d*)-(\d*)\]$/).first
      next if not a and not b # not found
      a != "" ? a = a.to_i : a = 1
      b != "" ? b = b.to_i : b

      if b != ""

        # Merge keys, creating missing entries if needed.
        (a..b).each { |x|
          key = "#{prefix}#{x}"
          key = key.to_sym if key_ab.is_a?(Symbol)

          # For duplicate entries, the value of PREFIXx is kept.
          self[key] = deep_merge_entries(deep_copy(value_ab), self[key]).clone
        }

      else

        # Modify only existing keys. Looking up for PREFIXx keys.
        self.clone.each { |key_x, value_x|
          next if key_x.class != key_ab.class
          x = key_x.to_s.scan(/^#{prefix}(\d*)$/).first
          x = x.first if x
          next if not x or x.to_i < a

          # For duplicate entries, the value of PREFIXx is kept.
          self[key_x] = deep_merge_entries(deep_copy(value_ab), value_x).clone
        }
      end

      # Delete entry "PREFIX[a-b]"
      self.delete(key_ab)
      keys.delete(key_ab)
    }

    # Do it recursivly
    keys.each { |key, value|
      if value.is_a?(Hash)
        self[key].expand_square_brackets(value)
      end
    }
  end

  # Sort a hash according to the position of the key in the array.
  def sort_by_array(array)
    Hash[sort_by{|key, _| array.index(key) or raise "Unknown key to sort array: #{key}" }] 
  end

  # Add an element composed of nested Hashes made from elements found in "array" argument
  # i.e.: from_array([a, b, c],"foo") -> {a: {b: {c: "foo"}}}
  def self.from_array(array, value)
    return array.reverse.inject(value) { |a, n| { n => a } }
  end

  # Custom iterator. Same as "each" but it sorts keys by node_uid (ie. graphene-10 after graphene-9)
  def each_sort_by_node_uid
    self.sort_by { |item| item.to_s.split(/(\d+)/).map { |e| [e.to_i, e] } }.each { |key, value|
      yield key, value if key != nil
    }
  end

  # Custom iterator. Only consider entries corresponding to cluster_list and node_list. Sorted by node_uid.
  def each_filtered_node_uid(cluster_list, node_list)
    self.each_sort_by_node_uid { |key, properties|
      # As an example, key can be equal to 'grimoire-1' for default resources or
      # ['grimoire-1', 1] for disk resources (disk nÂ°1 of grimoire-1)
      node_uid, = key
      cluster_uid = node_uid.split(/-/).first

      if (! cluster_list || cluster_list.include?(cluster_uid)) &&
          (! node_list || node_list.include?(node_uid))
        yield key, properties
      end
    }
  end

  # Ex: { a: 1, b: nil, c: { d: nil, e: '' } }.deep_reject! { |k, v| v.blank? }
  # ==> { a: 1 }

  # Note: the blk delete condition is also applied to hash
  #       use  { |k, v| !Hash === v } if you do not want this default behavior
  def deep_reject!(&blk)
    self.each do |k, v|
      v.deep_reject!(&blk) if v.is_a?(Hash)
      self.delete(k) if blk.call(k, v)
    end
  end

end

def deep_copy(o)
  Marshal.load(Marshal.dump(o))
end

class NilClass
  def clone()
    nil
  end
end
