require 'csv'

def csv_create_input_files(options)
  csv = CSV.read(options[:csv], headers: true).map(&:to_h)
  tmpdir = Dir.mktmpdir('refrepo-mass-create')
  FileUtils.mkdir_p("#{tmpdir}/generators/ipmitools/")
  console_password = File::new("#{tmpdir}/generators/ipmitools/console-password.yaml", "w")
  console = File::new("#{tmpdir}/generators/ipmitools/console.yaml", "w")
  FileUtils.mkdir_p("#{tmpdir}/generators/kadeploy/")
  kadeploy = File::new("#{tmpdir}/generators/kadeploy/kadeploy.yaml", "w")


  csv.group_by { |e| [e['site'], e['cluster']] }.each_pair do |site_cluster, rows|
    site, cluster = site_cluster
    next if options[:site] and site != options[:site]
    next if options[:cluster] and cluster != options[:cluster]
    dir = "input/grid5000/sites/#{site}/clusters/#{cluster}/"
    if File::exist?(dir)
      puts "#{site}-#{cluster}: SKIPPING because target directory #{dir} exists"
    end
    nodes_count = rows.length
    FileUtils::mkdir_p(dir)
    File::open("#{dir}/#{cluster}.yaml", "w") do |fd|
      fd.puts <<~EOF
---
model: Cluster Model # TODO: change this value.
created_at: 1970-01-01 # TODO: change this value
kavlan: false
boot_type: uefi # TODO: specify if 'uefi' (ideally) or 'bios' (legacy, if no other choice)
exotic: false # TODO: specify if 'true' or 'false'
queues:
  - admin
  - testing
nodes:
  #{cluster}-#{nodes_count == 1 ? '1' : "[1-#{nodes_count}]"}:
    chassis:
      manufactured_at: 1970-01-01 # TODO: Put date.
      warranty_end: 1970-01-01 # TODO: Put date.
    supported_job_types:
      deploy: true
      besteffort: true
      max_walltime: 0
    processor:
      microarchitecture: Haswell # TODO: replace with microarch name.
      clock_speed: 8 # TODO: Replace with clock speed.
    network_adapters:
      bmc:
        interface: Ethernet
        enabled: true
        mountable: false
        mounted: false
      eth0:
        enabled: true
        mountable: true
        mounted: true
    storage_devices:
      disk0: # This field will have to be renamed later.
        id: disk0
        interface: SAS
        by_path: "/dev/disk/by-path/dummy" # this path will have to change later.
    software:
      standard-environment: debian11-x64-std # TODO: check that architecture is OK
    management_tools:
      bmc_vendor_tool: ipmitool # TODO: replace with bmc_vendor_tool (ipmitool, racadm)
    nodeset: #{cluster}
      EOF
    end

    File::open("#{dir}/nodes.yaml.erb", "w") do |fd|
      mac_prod = rows.map { |r| r['mac_prod'] }.join("\n")
      mac_bmc = rows.map { |r| r['mac_bmc'] }.join("\n")
      fd.puts <<~EOF
<%
  # File generated by 'rake mass:create SRC=#{options[:csv]}
  # If changes are needed, it might be better to edit the source data and regenerate using 'rake mass:create'
 
  cluster_name = "#{cluster}"
  nodes_number = #{nodes_count} # Size of the cluster (number of nodes)
  # MAC addresses declaration
  mac_eth0_list = %w(
#{mac_prod}
  )
  mac_bmc_list = %w(
#{mac_bmc}
  )
%>
---
nodes:
<% (1..nodes_number).each { |i| %>
 <%= cluster_name %>-<%= i %>:
    architecture:
      nb_procs: 1 # Fake data, will be replaced by g5k-checks
      nb_cores: 72 # Fake data, will be replaced by g5k-checks
      nb_threads: 72 # Fake data, will be replaced by g5k-checks
      platform_type: x86_64 # Fake data, will be replaced by g5k-checks
      cpu_core_numbering: contiguous # Fake data, will be replaced by g5k-checks
    bios:
      release_date: 01/01/2000 # Fake date, will be replaced by g5k-checks
      vendor: Unknown # Fake vendor, will be replaced by g5k-checks
      version: 1 # Fake version, will be replaced by g5k-checks
    bmc_version: v1 # Fake version, will be replaced by g5k-checks
    chassis:
      manufacturer: Unknown # Fake manufacturer, will be replaced by g5k-checks
      name: Unknown # Fake name, will be replaced by g5k-checks
    main_memory:
      ram_size: 8 # Fake size, will be replaced by g5k-checks
    memory_devices:
      dimm:
        size: 8 # Fake size, will be replaced by g5k-checks
        technology: dram # Common memory technology, will be replaced by g5k-checks
    processor:
      model: Unknown # Fake model name, will be replaced by g5k-checks
      other_description: description # Fake description, will be replaced by g5k-checks
      vendor: vendor # Fake vendor, will be replaced by g5k-checks
      version: vendor # Fake version, will be replaced by g5k-checks
      cache_l1d: 8 # Fake cache, will be replaced by g5k-checks
      cache_l1i: 8 # Fake cache, will be replaced by g5k-checks
      cache_l2: 8 # Fake cache, will be replaced by g5k-checks
      cache_l3: 8 # Fake cache, will be replaced by g5k-checks
      instruction_set: x86-64 # Common instruction set, will be replaced by g5k-checks
      microcode: "0xd000001" # Fake microcode, will be replaced by g5k-checks
      ht_capable: true # Default ht capable value, will be replaced by g5k-checks 
    main_memory:
      ram_size: 8 # Fake ram size, will be replaced by g5k-checks
    memory_devices:
      dimm_proc 1 dimm 1: # Fake dimm name, will be replaced by g5k-checks
        size: 8 # Fake dimm size, will be replaced by g5k-checks
        technology: dram # Default dimm technology, will be replaced by g5k-checks
    operating_system:
      cstate_driver: unknown # Fake driver, will be replaced by g5k-checks
      cstate_governor: unknown # Fake governor, will be replaced by g5k-checks
      ht_enabled: true # common value for hyper threading, will be replaced by g5k-checks
      pstate_driver: unknwon # Fake driver, will be replaced by g5k-checks
      pstate_governor: unknown # Fake driver, will be replaced by g5k-checks
      turboboost_enabled: true # Default value for turboboost, will be replaced by g5k-checks 
    network_adapters:
      bmc:
        management: true
        mac: <%= mac_bmc_list[i - 1] %>
      eth0:
        interface: Ethernet
        management: false
        driver: mlx_core # Fake data, will be replaced by g5k-checks
        name: enp1s0f0np0 # Fake data, will be replaced by g5k-checks
        rate: 10000000000 # Fake data, will be replaced by g5k-checks
        mac: <%= mac_eth0_list[i - 1] %>
    storage_devices:
      disk0:
        storage: SSD # Fake data, will be replaced by g5k-checks
        model: unknown # Fake data, will be replaced by g5k-checks
        size: 8 # Fake data, will be replaced by g5k-checks
<% } %>
      EOF
    end
    console_password.puts "  #{cluster}: root password"
    console.puts <<-EOF
  #{cluster}:
    lanpower:
      bmc: ipmi2
      suffix: "-bmc"
    EOF
    kadeploy.puts <<-EOF
  #{cluster}:
    partitioning.disable_swap: false
    deploy.params: ETH_DEV=eth0 console=tty1 console=ttyS1,115200 ramdisk_size=260000 rw
    user.params: console=tty1 console=ttyS1,115200
    remoteops.power_status.soft.cmd: "/usr/bin/lanpower -s -m HOSTNAME_SHORT"
    EOF
  end
  console_password.close
  console.close
  kadeploy.close
  puts "INFO: Configuration snippets for generators were generated in #{tmpdir}"
end
