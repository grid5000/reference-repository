#
# This file was generated from reference-repository.git
# Do not edit this file by hand. Your changes will be overwritten.
#
---
partitioning:
  deploy_label: DEPLOY
  block_device: disk0
  script: /etc/kadeploy3<%= suffix %>/<%= ! data['partitioning.script'].nil? ? data['partitioning.script'] : "partitioning.sh" %>
  <%- if !data['formating.script'].nil? && !data['formating.script'].empty? -%>
  formating_script: /etc/kadeploy3<%= suffix %>/<%= data['formating.script'] %>
  <%- end -%>
  disk_path:
  <%- cluster['nodes'].values.first['storage_devices'].reject{|disk| disk['reservation']}.each do |disk| -%>
    <%= disk['id'] %>: <%= disk['by_path'] %>
  <%- end -%>
trusted_deployment:
  partition: disk0/PROD
  user: oar
<% if data['trusted_env'] %>
  envs:
    - name: <%= cluster['nodes'].values.first['software']['standard-environment'] %>
      user: deploy
<% end %>
kexec:
  server_precmd: "true"
  script: /etc/kadeploy3<%= suffix %>/<%= data.fetch('kexec_script', 'kexec.sh') %>
  <% if ! data['partitioning.disable_swap'].nil? %>disable_swap: <%= data['partitioning.disable_swap'] %><% end %>
arch:
  default: <%= cluster['nodes'].values.first['architecture']['platform_type'] %>
  supported: <%= cluster['nodes'].values.first['architecture']['platform_type'] %>
timeouts:
  reboot: <%= data['reboot.timeout'] %>
  kexec: <%= data['reboot.kexec'] %>
remoteops:
  console:
  - name: soft
    cmd: <%= data['remoteops.console.soft.cmd'] ? data['remoteops.console.soft.cmd'] : '/usr/bin/conman -f -d conman HOSTNAME_SHORT' %>
  power_status:
  - name: soft
    cmd: <%= data['remoteops.power_status.soft.cmd'] ? data['remoteops.power_status.soft.cmd'] : '/usr/bin/lanpower -m HOSTNAME_FQDN -s' %>
  power_on:
  - name: hard
    cmd: <%= data['remoteops.power_on.hard.cmd'] ? data['remoteops.power_on.hard.cmd'] : '/usr/bin/lanpower -c on -m HOSTNAME_SHORT' %><% if data['remoteops.power_on.very_hard.cmd'] %>
  - name: very_hard
    cmd: <%= data['remoteops.power_on.very_hard.cmd'] %><%end %>
  reboot:
  - name: soft
    cmd: <%= data['remoteops.reboot.soft.cmd'] ? data['remoteops.reboot.soft.cmd'] : 'ssh -q -F /etc/kadeploy3'+suffix+'/keys/ssh_config root@HOSTNAME_FQDN "[ -d /etc/grid5000  ] && if [ -f /bin/systemctl ]; then nohup /bin/systemctl reboot >/dev/null & else nohup /sbin/reboot >/dev/null & fi"' %>
  - name: hard
    cmd: <%= data['remoteops.reboot.hard.cmd'] ? data['remoteops.reboot.hard.cmd'] : '/usr/bin/lanpower -c cycle -m HOSTNAME_SHORT' %><% if data['remoteops.reboot.very_hard.cmd'] %>
  - name: very_hard
    cmd: <%= data['remoteops.reboot.very_hard.cmd'] %><% end %>
  power_off:
  - name: soft
    cmd: ssh -q -F /etc/kadeploy3<%= suffix %>/keys/ssh_config root@HOSTNAME_FQDN "nohup /sbin/poweroff &>/dev/null &"
  - name: hard
    cmd: <%= data['remoteops.power_off.hard.cmd'] ? data['remoteops.power_off.hard.cmd'] : '/usr/bin/lanpower -c off -m HOSTNAME_SHORT' %><% if data['remoteops.power_off.very_hard.cmd'] %>
  - name: very_hard
    cmd: <%= data['remoteops.power_off.very_hard.cmd'] %><%end %>
boot:
  install_bootloader: /etc/kadeploy3<%= suffix %>/<%= data['deploy.install_bootloader'] %>
<%- if data['startup_script'] -%>
  startup_script: /etc/kadeploy3<%= suffix %>/<%= data['startup_script'] %>
<%- end -%>
  kernels:<%
kernel_prod = 'kernels/kadeploy3-deploy-kernel-buster.vmlinuz'
initrd_prod = 'kernels/kadeploy3-deploy-kernel-buster.initrd.img'
kernel_dev  = 'kernels/kadeploy3-deploy-kernel-buster.vmlinuz'
initrd_dev  = 'kernels/kadeploy3-deploy-kernel-buster.initrd.img'%>
    deploy:<%
    if !data['deploy.drivers'].nil? %>
      drivers: <%= data['deploy.drivers'] %><% end %>
      vmlinuz: <%= data['deploy.vmlinuz'] ? data['deploy.vmlinuz'] :
        suffix == '' ? kernel_prod : kernel_dev %>
      initrd: <%= data['deploy.initrd'] ? data['deploy.initrd'] :
        suffix == '' ? initrd_prod : initrd_dev %>
      params: <%= data['deploy.params'] %><%= data['deploy.default_params'] ? ' ' + data['deploy.default_params'] : '' %>
      supported_fs: ext2, ext3, ext4<%
   if !data['nfsroot.params'].nil? %>
    nfsroot:
      params: <%= data['nfsroot.params'] %>
      vmlinuz: kernels/deploy-vmlinuz-2.6.31.4-nfsroot<% end %>
    user:
      params: <%= data['user.params'] %>
<%- if ! data['preinstall'].nil? && data['preinstall'].to_s == "true" -%>
postinstall:
  files:
  - script: none
    format: tgz
    file:  /grid5000/preinstalls/preinstall-<%= cluster_uid %>.tgz
<%- end -%>
pxe:
  <%- if cluster['boot_type'] == 'bios' -%>
  script: /etc/kadeploy3<%= suffix %>/<%= data.fetch('pxe_script', 'set_pxe.rb') %>
  <%- elsif cluster['boot_type'] == 'uefi' -%>
  script: /etc/kadeploy3<%= suffix %>/<%= data.fetch('pxe_script', 'set_uefi_pxe.rb') %>
  <%- else -%>
  # unable to select a pxe script for "<%= cluster['boot_type'] %>" boot type.
  <%- end -%>
  headers:
    dhcp: &id001 |-
      PROMPT 0
      SERIAL <%= data['dhcp.serial'] %>
    networkboot: *id001
    localboot: *id001
automata:
  macrosteps:
    SetDeploymentEnv:
<%- if data['trusted_env'] -%>
    - timeout: <%= data['deployment.timeout'] %>
      type: Trusted
      retries: <%= data['deployment.retries'].nil? ? 1 : data['deployment.retries'] %>
<%- end -%>
    - timeout: <%= data['deployment.timeout'] %>
      type: Untrusted
      retries: <%= data['deployment.retries'].nil? ? 1 : data['deployment.retries'] %>
    BroadcastEnv:
    - timeout: <%= data['broadcast.timeout'] %>
      type: Kascade
      retries: <%= data['broadcast.retries'].nil? ? 1 : data['broadcast.retries'] %>
    BootNewEnv:
    - timeout: <%= data['boot.timeout.0'] %>
      type: <%= data['boot.type.0'].nil? ? 'Kexec' : data['boot.type.0'] %>
      retries: 0
    - timeout: <%= data['boot.timeout.1'] %>
      type: HardReboot
      retries: 0
